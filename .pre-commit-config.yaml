# Pre-commit hooks for Maelstrom Monitoring Stack
# Runs linting and validation before commits

repos:
  # Shell script linting with shellcheck
  - repo: https://github.com/koalaman/shellcheck-precommit
    rev: v0.9.0
    hooks:
      - id: shellcheck
        name: Lint shell scripts
        description: Lint shell scripts with shellcheck
        entry: shellcheck
        language: system
        files: \.(sh|bash|ksh|zsh)$
        args: ['--format=gcc', '--severity=warning']

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint.git
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: Lint YAML files
        description: Lint YAML files with yamllint
        entry: yamllint
        language: python
        types: [yaml]
        args: ['-c', '.yamllint.yml']

  # Python linting and formatting
  - repo: https://github.com/psf/black
    rev: 24.4.2
    hooks:
      - id: black
        name: Format Python code
        description: Format Python code with black
        language: python
        files: \.py$

  - repo: https://github.com/pycqa/flake8
    rev: 7.1.0
    hooks:
      - id: flake8
        name: Lint Python code
        description: Lint Python code with flake8
        language: python
        files: \.py$
        args: ['--max-line-length=120', '--ignore=E203,W503']

  # Docker linting with hadolint
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: Lint Dockerfiles
        description: Lint Dockerfiles with hadolint
        entry: hadolint
        language: system
        files: Dockerfile.*
        args: ['--ignore', 'DL3008', '--ignore', 'DL3009']

  # Security scanning with trivy
  - repo: local
    hooks:
      - id: trivy-config
        name: Trivy Configuration Scan
        description: Scan infrastructure configuration for security issues
        entry: trivy
        language: system
        pass_filenames: false
        args: ['config', '.', '--format', 'table', '--severity', 'HIGH,CRITICAL']
        files: \.(yml|yaml|json|tf)$

  # Docker Compose validation
  - repo: local
    hooks:
      - id: docker-compose-validate
        name: Validate Docker Compose
        description: Validate Docker Compose configuration
        entry: bash
        language: system
        pass_filenames: false
        args: ['-c', 'docker-compose -f base.yml config --quiet && docker-compose -f base.yml -f prod.yml config --quiet']
        files: \.(yml|yaml)$

  # Custom validation hooks
  - repo: local
    hooks:
      - id: validate-env-template
        name: Validate Environment Template
        description: Ensure .env file doesn't contain actual secrets
        entry: bash
        language: system
        pass_filenames: false
        args: ['-c', 'if [ -f .env ]; then grep -q "your-" .env || (echo "Error: .env may contain real secrets. Use placeholders like your-password" && exit 1); fi']
        files: \.env$
        always_run: false

      - id: check-merge-conflict
        name: Check for merge conflicts
        description: Check for files that contain merge conflict markers
        entry: bash
        language: system
        args: ['-c', 'grep -rn "^<<<<<<< " . --include="*.yml" --include="*.yaml" --include="*.sh" --include="*.py" --include="*.md" && exit 1 || exit 0']
        pass_filenames: false

      - id: check-executable-scripts
        name: Check script executability
        description: Ensure shell scripts are executable
        entry: bash
        language: system
        args: ['-c', 'find . -name "*.sh" -not -path "./.git/*" -not -executable -print | while read -r file; do echo "Warning: $file is not executable"; done']
        pass_filenames: false

      - id: banned-github-auth-patterns
        name: Enforce non-interactive GitHub auth
        description: Fail on banned interactive/insecure GitHub auth patterns
        entry: scripts/security/check_banned_github_auth.sh
        language: system
        pass_filenames: false

  # Generic file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        name: Trim trailing whitespace
        description: Remove trailing whitespace
        exclude: \.(md|yaml|yml)$

      - id: end-of-file-fixer
        name: Fix end of files
        description: Ensure files end with a newline
        exclude: \.(png|jpg|jpeg|gif|ico)$

      - id: check-added-large-files
        name: Check for large files
        description: Prevent large files from being committed
        args: ['--maxkb=1024']

      - id: check-case-conflict
        name: Check for case conflicts
        description: Check for files that would conflict in case-insensitive filesystems

      - id: check-json
        name: Check JSON
        description: Validate JSON files
        files: \.json$

      - id: check-merge-conflict
        name: Check for merge conflicts
        description: Check for merge conflict markers

      - id: check-symlinks
        name: Check symlinks
        description: Check for broken symlinks

      - id: detect-private-key
        name: Detect private keys
        description: Detect private keys in files

# Configuration for pre-commit behavior
default_language_version:
  python: python3

# Minimum pre-commit version
minimum_pre_commit_version: '2.20.0'

# Files to exclude from all hooks (in addition to per-hook excludes)
exclude: |
  (?x)^(
    logs/.*|
    backups/.*|
    output/.*|
    collections/.*/data/.*|
    \.git/.*|
    collections/influxdb/.*|
    collections/prometheus_data/.*|
    collections/grafana_data/.*|
    collections/loki/chunks/.*
  )$

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [trivy-config, docker-compose-validate]
  submodules: false
