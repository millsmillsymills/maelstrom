name: Lint and Validate Infrastructure

on:
  push:
    branches: [ main, develop ]

jobs:
  lint-and-validate:
    runs-on: ubuntu-latest
    env:
      GIT_TERMINAL_PROMPT: 0
      DEBIAN_FRONTEND: noninteractive

    steps:
      - name: noninteractive-check
        shell: bash
        run: |
          set -euo pipefail
          if [ -x /usr/local/bin/codex-preflight ]; then
            /usr/local/bin/codex-preflight || echo "preflight reported warnings"
          else
            echo "codex-preflight not present on runner; skipping preflight."
          fi
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          # Keep CI lightweight and reliable; install only tooling
          pip install pytest yamllint

      - name: Install shellcheck
        run: |
          sudo -n apt-get update -y
          sudo -n apt-get install -y shellcheck

      - name: Install Hadolint
        run: |
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint
          sudo -n mv hadolint /usr/local/bin/

      - name: Install Trivy
        run: |
          set -euo pipefail
          if ! command -v trivy >/dev/null 2>&1; then
            echo "Installing Trivy..."
            if sudo -n apt-get update -y && sudo -n apt-get install -y wget apt-transport-https gnupg lsb-release; then
              wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo -n apt-key add - || true
              echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo -n tee -a /etc/apt/sources.list.d/trivy.list
              sudo -n apt-get update -y || true
              sudo -n apt-get install -y trivy || true
            else
              echo "⚠️ Skipping Trivy install due to apt failure"
            fi
          else
            echo "Trivy already installed"
          fi

      - name: Lint Dockerfiles with Hadolint
        run: |
          echo "::group::Dockerfile Linting"
          find . -name "Dockerfile*" -not -path "./.git/*" | while read -r dockerfile; do
          echo "Linting: $dockerfile"
          hadolint "$dockerfile" || exit_code=$?
          done
          echo "::endgroup::"

      - name: Lint YAML files with yamllint
        run: |
          echo "::group::YAML Linting"
          # Limit linting to active configuration and workflows to avoid archived backups noise
          yamllint -c .yamllint.yml \
            .yamllint.yml \
            .github/workflows \
            base.yml \
            prod.yml \
            docker-compose.yml \
            docker-compose.secrets.yml || exit_code=$?
          echo "::endgroup::"

      - name: Lint shell scripts with shellcheck
        run: |
          echo "::group::Shell Script Linting"
          find . -name "*.sh" -not -path "./.git/*" -not -path "./logs/*" -not -path "./backups/*" | while read -r script; do
          echo "Linting: $script"
          shellcheck "$script" || exit_code=$?
          done
          echo "::endgroup::"

      - name: Validate Docker Compose configuration
        run: |
          echo "::group::Docker Compose Validation"
          # Ensure docker compose plugin is available
          if ! docker compose version >/dev/null 2>&1; then
            sudo -n apt-get update -y
            # Install official Docker Compose plugin package on Ubuntu
            sudo -n apt-get install -y docker-compose-plugin
          fi
          # Validate base configuration
          if [ -f "base.yml" ]; then
            echo "Validating base.yml..."
            docker compose -f base.yml config --quiet
          fi

          # Validate production overlay
          if [ -f "prod.yml" ] && [ -f "base.yml" ]; then
            echo "Validating base.yml + prod.yml..."
            docker compose -f base.yml -f prod.yml config --quiet
          fi
          echo "::endgroup::"

      - name: Run Trivy infrastructure scanning (non-blocking)
        run: |
          echo "::group::Infrastructure Security Scan"
          # Scope scanning to repo (exclude backups/dev caches) and do not fail build
          TRIVY_COMMON_ARGS='--skip-dirs backups,.nvm,resurgent,output,trash,logs,collections/victoriametrics-data,collections/minio-data'
          if command -v trivy >/dev/null 2>&1; then
            IGNORE=""
            if [ -f .trivyignore ]; then IGNORE="--ignorefile .trivyignore"; fi
            trivy config . $TRIVY_COMMON_ARGS --severity HIGH,CRITICAL --format sarif --output trivy-results.sarif --exit-code 0 $IGNORE
            trivy config . $TRIVY_COMMON_ARGS --severity HIGH,CRITICAL --format table --exit-code 0 $IGNORE
          else
            echo "⚠️ Trivy not available; skipping scan"
          fi
          echo "::endgroup::"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run pytest on test stubs
        run: |
          echo "::group::Python Testing"
          if find collections -name "test*.py" -o -name "*_test.py" | grep -q .; then
          echo "Found test files, running pytest..."
          python -m pytest collections/ -v --tb=short
          else
          echo "No test files found, skipping pytest"
          fi
          echo "::endgroup::"

      - name: Validate monitoring scripts
        run: |
          echo "::group::Script Validation"
          # Test that critical scripts are executable and have valid syntax
          scripts=(
          "deploy_stack.sh"
          "validate_stack.sh"
          "scripts/scan_images.sh"
          "scripts/backups/backup_influxdb.sh"
          "scripts/backups/backup_volume.sh"
          )

        for script in "${scripts[@]}"; do
        if [ -f "$script" ]; then
        echo "Validating: $script"
        if [ -x "$script" ]; then
        echo "✅ $script is executable"
        else
        echo "❌ $script is not executable"
        exit 1
        fi

            # Basic syntax check
        bash -n "$script"
        echo "✅ $script syntax is valid"
        else
        echo "⚠️ $script not found"
        fi
        done
        echo "::endgroup::"

      - name: Check for secrets in code
        run: |
          echo "::group::Secret Detection"
          # Basic secret detection patterns
          if grep -r -E "(password|secret|key|token).*=" . \
            --include="*.yml" --include="*.yaml" --include="*.sh" \
            --exclude-dir=".git" --exclude-dir="backups" --exclude-dir="logs" --exclude-dir="output" --exclude-dir="trash" \
            | grep -v ".env" | grep -v "example" | grep -v "placeholder"; then
            echo "❌ Potential secrets found in code!"
            exit 1
          else
            echo "✅ No hardcoded secrets detected"
          fi
          echo "::endgroup::"

      - name: Generate validation report
        if: always()
        run: |
          echo "## 🔍 Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dockerfile Linting | $([[ $? -eq 0 ]] && echo "✅ Pass" || echo "❌ Fail") |" >> $GITHUB_STEP_SUMMARY
          echo "| YAML Linting | $([[ $? -eq 0 ]] && echo "✅ Pass" || echo "❌ Fail") |" >> $GITHUB_STEP_SUMMARY
          echo "| Shell Script Linting | $([[ $? -eq 0 ]] && echo "✅ Pass" || echo "❌ Fail") |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Compose Validation | $([[ $? -eq 0 ]] && echo "✅ Pass" || echo "❌ Fail") |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scanning | $([[ $? -eq 0 ]] && echo "✅ Pass" || echo "❌ Fail") |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
