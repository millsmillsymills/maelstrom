#!/bin/bash
# shellcheck disable=SC1091
[ -f /usr/local/lib/codex_env.sh ] && . /usr/local/lib/codex_env.sh
# Maelstrom Performance Monitor
# Generated by Claude Code Analysis - 2025-08-06
# Purpose: Monitor infrastructure performance and generate health reports

echo "=============================================="
echo "MAELSTROM INFRASTRUCTURE PERFORMANCE REPORT"
echo "Generated: $(date)"
echo "=============================================="
echo ""

# System resource overview
echo "SYSTEM RESOURCE OVERVIEW"
echo "========================"
echo "Uptime: $(uptime | awk -F', load average' '{print $1}' | sed 's/.*up //')"
echo "Load Average: $(uptime | awk -F'load average: ' '{print $2}')"
echo "Memory Usage: $(free -h | awk 'NR==2{printf "%.1f%% (%s used of %s)\n", $3*100/$2, $3, $2}')"
echo "Disk Usage: $(df -h / | awk 'NR==2{printf "%s (%s used of %s)\n", $5, $3, $2}')"
echo ""

# Container resource usage with improved formatting
echo "CONTAINER RESOURCE USAGE"
echo "========================"
printf "%-25s %-10s %-20s %-15s %-15s\n" "CONTAINER" "CPU %" "MEMORY" "NET I/O" "BLOCK I/O"
printf "%-25s %-10s %-20s %-15s %-15s\n" "$(printf '%.0s-' {1..25})" "$(printf '%.0s-' {1..10})" "$(printf '%.0s-' {1..20})" "$(printf '%.0s-' {1..15})" "$(printf '%.0s-' {1..15})"
${DOCKER} stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}" | tail -n +2 | while IFS=$'\t' read container cpu mem net block; do
    printf "%-25s %-10s %-20s %-15s %-15s\n" "$container" "$cpu" "$mem" "$net" "$block"
done
echo ""

# Service health status with color coding
echo "SERVICE HEALTH STATUS"
echo "===================="
printf "%-30s %-15s %-30s\n" "SERVICE NAME" "STATUS" "HEALTH"
printf "%-30s %-15s %-30s\n" "$(printf '%.0s-' {1..30})" "$(printf '%.0s-' {1..15})" "$(printf '%.0s-' {1..30})"

${DOCKER} compose ps | tail -n +3 | while read line; do
    container=$(echo "$line" | awk '{print $1}')
    status=$(echo "$line" | awk '{print $4}' | sed 's/Up/RUNNING/g; s/Exit/STOPPED/g; s/Restarting/RESTARTING/g')
    
    # Extract health status if present
    if echo "$line" | grep -q "(healthy)"; then
        health="HEALTHY"
    elif echo "$line" | grep -q "(unhealthy)"; then
        health="UNHEALTHY"
    elif echo "$line" | grep -q "Restarting"; then
        health="FAILING"
    else
        health="UNKNOWN"
    fi
    
    printf "%-30s %-15s %-30s\n" "$container" "$status" "$health"
done
echo ""

# Storage usage analysis
echo "STORAGE USAGE ANALYSIS"
echo "======================"
echo "Collections directory: $(du -sh /home/mills/collections 2>/dev/null | awk '{print $1}' || echo 'N/A')"
echo "Logs directory: $(du -sh /home/mills/logs 2>/dev/null | awk '{print $1}' || echo 'N/A')"  
echo "Backups directory: $(du -sh /home/mills/backups 2>/dev/null | awk '{print $1}' || echo 'N/A')"

# Docker volume usage
echo ""
echo "DOCKER VOLUME USAGE"
echo "==================="
${DOCKER} system df | grep -A 5 "Local Volumes"
echo ""

# Configuration file statistics
echo "CONFIGURATION FILE STATISTICS"
echo "=============================="
prometheus_configs=$(find /home/mills/collections/prometheus -name '*.yml' 2>/dev/null | wc -l)
total_yamls=$(find /home/mills/collections -name '*.yml' -o -name '*.yaml' 2>/dev/null | grep -v "Permission denied" | wc -l)
compose_files=$(find /home/mills -name '*compose*.yml' -type f 2>/dev/null | wc -l)

echo "Prometheus configs: $prometheus_configs"
echo "Total YAML files: $total_yamls"
echo "Docker compose files: $compose_files"
echo ""

# Network connectivity tests
echo "NETWORK CONNECTIVITY TESTS"
echo "=========================="
echo "Testing critical service endpoints..."

# Test Prometheus
if curl -s http://localhost:9090/-/ready >/dev/null 2>&1; then
    echo "✅ Prometheus (9090): Healthy"
else
    echo "❌ Prometheus (9090): Not responding"
fi

# Test Grafana
if curl -s http://localhost:3000/api/health >/dev/null 2>&1; then
    echo "✅ Grafana (3000): Healthy"
else
    echo "❌ Grafana (3000): Not responding"
fi

# Test InfluxDB
if curl -s http://localhost:8086/ping >/dev/null 2>&1; then
    echo "✅ InfluxDB (8086): Healthy"
else
    echo "❌ InfluxDB (8086): Not responding"
fi

# Test Alertmanager
if curl -s http://localhost:9093/-/ready >/dev/null 2>&1; then
    echo "✅ Alertmanager (9093): Healthy"
else
    echo "❌ Alertmanager (9093): Not responding"
fi

# Test Zabbix
if curl -s http://localhost:8080 >/dev/null 2>&1; then
    echo "✅ Zabbix Web (8080): Healthy"
else
    echo "❌ Zabbix Web (8080): Not responding"
fi

echo ""

# Service restart analysis  
echo "RECENT CONTAINER RESTARTS"
echo "========================="
echo "Checking for containers that have restarted recently..."
${DOCKER} ps --format "table {{.Names}}\t{{.Status}}" | grep -E "(second|minute|hour)" | head -10
echo ""

# Critical alerts summary (if Prometheus is accessible)
echo "CRITICAL ALERTS SUMMARY"
echo "======================="
if curl -s http://localhost:9093/api/v1/alerts >/dev/null 2>&1; then
    active_alerts=$(curl -s http://localhost:9093/api/v1/alerts | jq -r '.data[] | select(.status.state=="active") | .labels.alertname' 2>/dev/null | wc -l)
    echo "Active alerts: ${active_alerts:-0}"
    
    if [ "${active_alerts:-0}" -gt 0 ]; then
        echo ""
        echo "Active Alert Details:"
        curl -s http://localhost:9093/api/v1/alerts | jq -r '.data[] | select(.status.state=="active") | "- \(.labels.alertname): \(.annotations.summary // .annotations.description)"' 2>/dev/null || echo "Unable to fetch alert details"
    fi
else
    echo "❌ Unable to connect to Alertmanager for alert status"
fi

echo ""
echo "=============================================="
echo "PERFORMANCE RECOMMENDATIONS"
echo "=============================================="

# Memory usage check
total_mem=$(free | awk 'NR==2{print $2}')
used_mem=$(free | awk 'NR==2{print $3}')
mem_percentage=$(( (used_mem * 100) / total_mem ))

if [ $mem_percentage -gt 80 ]; then
    echo "⚠️  HIGH MEMORY USAGE: ${mem_percentage}% - Consider optimizing container memory limits"
elif [ $mem_percentage -gt 60 ]; then
    echo "⚡ MODERATE MEMORY USAGE: ${mem_percentage}% - Monitor memory trends"
else
    echo "✅ MEMORY USAGE: ${mem_percentage}% - Optimal"
fi

# Disk usage check
disk_usage=$(df / | awk 'NR==2{print $5}' | sed 's/%//')
if [ $disk_usage -gt 85 ]; then
    echo "⚠️  HIGH DISK USAGE: ${disk_usage}% - Cleanup recommended"
elif [ $disk_usage -gt 70 ]; then
    echo "⚡ MODERATE DISK USAGE: ${disk_usage}% - Monitor disk trends" 
else
    echo "✅ DISK USAGE: ${disk_usage}% - Optimal"
fi

# Log file cleanup recommendation
log_files=$(find /home/mills/logs -name "auto-recovery-*.log" 2>/dev/null | wc -l)
if [ $log_files -gt 1000 ]; then
    echo "⚠️  EXCESSIVE LOG FILES: ${log_files} auto-recovery logs - Run cleanup script"
elif [ $log_files -gt 500 ]; then
    echo "⚡ MODERATE LOG COUNT: ${log_files} auto-recovery logs - Consider cleanup"
else
    echo "✅ LOG FILE COUNT: ${log_files} files - Acceptable"
fi

echo ""
echo "Report completed at: $(date)"
echo "For cleanup recommendations, run: ./maelstrom_infrastructure_cleanup.sh"